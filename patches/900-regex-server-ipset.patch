--- a/Makefile
+++ b/Makefile
@@ -69,6 +69,8 @@ nettle_libs =   `echo $(COPTS) | $(top)/
                                                         HAVE_CRYPTOHASH $(PKG_CONFIG) --libs nettle \
                                                         HAVE_NETTLEHASH $(PKG_CONFIG) --libs nettle`
 gmp_libs =      `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_DNSSEC NO_GMP --copy -lgmp`
+regex_cflags =  `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_REGEX $(PKG_CONFIG) --cflags libpcre`
+regex_libs =    `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_REGEX $(PKG_CONFIG) --libs libpcre`
 sunos_libs =    `if uname | grep SunOS >/dev/null 2>&1; then echo -lsocket -lnsl -lposix4; fi`
 version =     -DVERSION='\"`$(top)/bld/get-version $(top)`\"'
 
@@ -90,8 +92,8 @@ hdrs = dnsmasq.h config.h dhcp-protocol.
 all : $(BUILDDIR)
 	@cd $(BUILDDIR) && $(MAKE) \
  top="$(top)" \
- build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags)" \
- build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs)" \
+ build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags) $(regex_cflags)" \
+ build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs) $(regex_libs)" \
  -f $(top)/Makefile dnsmasq 
 
 mostly_clean :
@@ -115,8 +117,8 @@ all-i18n : $(BUILDDIR)
 	@cd $(BUILDDIR) && $(MAKE) \
  top="$(top)" \
  i18n=-DLOCALEDIR=\'\"$(LOCALEDIR)\"\' \
- build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags)" \
- build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs)"  \
+ build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags) $(regex_cflags)" \
+ build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs) $(regex_libs)"  \
  -f $(top)/Makefile dnsmasq
 	for f in `cd $(PO); echo *.po`; do \
 		cd $(top) && cd $(BUILDDIR) && $(MAKE) top="$(top)" -f $(top)/Makefile $${f%.po}.mo; \
--- a/src/config.h
+++ b/src/config.h
@@ -134,6 +134,14 @@ HAVE_LOOP
 HAVE_INOTIFY
    use the Linux inotify facility to efficiently re-read configuration files.
 
+HAVE_REGEX
+   Define this if you want to link against lib pcre to get regex
+   support in "address=" and "server=" matches
+
+HAVE_REGEX_IPSET
+   Define this if you want to link against lib pcre to get regex
+   support in "ipset=" matches
+
 NO_ID
    Don't report *.bind CHAOS info to clients, forward such requests upstream instead.
 NO_TFTP
@@ -191,6 +199,8 @@ RESOLVFILE
 /* #define HAVE_CONNTRACK */
 /* #define HAVE_CRYPTOHASH */
 /* #define HAVE_DNSSEC */
+/* #define HAVE_REGEX */
+/* #define HAVE_REGEX_IPSET */
 
 
 /* Default locations for important system files. */
@@ -381,6 +391,15 @@ static char *compile_opts =
 "no-"
 #endif
 "i18n "
+#ifndef HAVE_REGEX
+"no-"
+#endif
+"regex"
+#if defined(HAVE_IPSET) && defined(HAVE_REGEX) && defined(HAVE_REGEX_IPSET)
+"(+ipset) "
+#else
+" "
+#endif
 #if defined(HAVE_LIBIDN2)
 "IDN2 "
 #else
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -153,6 +153,10 @@ extern int capget(cap_user_header_t head
 #include <priv.h>
 #endif
 
+#ifdef HAVE_REGEX
+#include <pcre.h>
+#endif
+
 /* Backwards compat with 2.83 */
 #if defined(HAVE_NETTLEHASH)
 #  define HAVE_CRYPTOHASH
@@ -539,6 +543,7 @@ union mysockaddr {
 #define SERV_LOOP           8192  /* server causes forwarding loop */
 #define SERV_DO_DNSSEC     16384  /* Validate DNSSEC when using this server */
 #define SERV_GOT_TCP       32768  /* Got some data from the TCP connection */
+#define SERV_IS_REGEX      65536  /* server entry is a regex */
 
 struct serverfd {
   int fd;
@@ -572,12 +577,30 @@ struct server {
   u32 uid;
 #endif
   struct server *next; 
+#ifdef HAVE_REGEX
+  pcre *regex;
+  pcre_extra *pextra;
+#endif
 };
 
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+	#define IPSET_IS_DOMAIN 0x01
+	#define IPSET_IS_REGEX 0x02
+#endif
+#endif
+
 struct ipsets {
   char **sets;
   char *domain;
   struct ipsets *next;
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+  pcre *regex;
+  pcre_extra *pextra;
+  unsigned char domain_type;
+#endif
+#endif
 };
 
 struct irec {
--- a/src/forward.c
+++ b/src/forward.c
@@ -23,6 +23,24 @@ static unsigned short get_id(void);
 static void free_frec(struct frec *f);
 static void query_full(time_t now);
 
+#ifdef HAVE_REGEX
+static inline int match_regex(const pcre * regex, const pcre_extra * pextra, const char* str, size_t len, unsigned int* group0_len)
+{
+    int captcount = 0;
+    int ret = 0;
+    if (pcre_fullinfo(regex, pextra, PCRE_INFO_CAPTURECOUNT, &captcount) == 0)
+    {
+        /* C99 dyn-array, or alloca must be used */
+        int ovect[(captcount + 1) * 3];
+        ret = pcre_exec(regex, pextra, str, len, 0, 0, ovect, (captcount + 1) * 3) > 0;
+ 
+        if (group0_len && ret)
+            *group0_len = (unsigned int) (ovect[1] - ovect[0]); // captured group 0
+    }
+    return ret;
+}
+#endif
+
 /* Send a UDP packet with its source address set as "source" 
    unless nowild is true, when we just send it with the kernel default */
 int send_from(int fd, int nowild, char *packet, size_t len, 
@@ -155,11 +173,28 @@ static unsigned int search_servers(time_
       }
     else if (serv->flags & SERV_HAS_DOMAIN)
       {
-	unsigned int domainlen = strlen(serv->domain);
-	char *matchstart = qdomain + namelen - domainlen;
-	if (namelen >= domainlen &&
-	    hostname_isequal(matchstart, serv->domain) &&
-	    (domainlen == 0 || namelen == domainlen || *(matchstart-1) == '.' ))
+	unsigned int domainlen = matchlen;
+	int serverhit = 0;
+
+#ifdef HAVE_REGEX
+	if (serv->flags & SERV_IS_REGEX)
+	  {
+		if (match_regex(serv->regex, serv->pextra, qdomain, namelen, &domainlen) && domainlen >= matchlen)
+		  serverhit = 1;
+	  }
+	else
+#endif
+	  {
+	    char *matchstart;
+	    domainlen = strlen(serv->domain);
+	    matchstart = qdomain + namelen - domainlen;
+	    if (namelen >= domainlen &&
+	        hostname_isequal(matchstart, serv->domain) &&
+	        (domainlen == 0 || namelen == domainlen || *(matchstart-1) == '.' ))
+	       serverhit = 1;
+	  }
+
+	if (serverhit)
 	  {
 	    if ((serv->flags & SERV_NO_REBIND) && norebind)	
 	      *norebind = 1;
@@ -186,6 +221,11 @@ static unsigned int search_servers(time_
 		if (domainlen >= matchlen)
 		  {
 		    *type = serv->flags & (SERV_HAS_DOMAIN | SERV_USE_RESOLV | SERV_NO_REBIND | SERV_DO_DNSSEC);
+#ifdef HAVE_REGEX
+		    if (serv->flags & SERV_IS_REGEX)
+				*domain = qdomain;
+		    else
+#endif
 		    *domain = serv->domain;
 		    matchlen = domainlen;
 		    if (serv->flags & SERV_NO_ADDR)
@@ -285,11 +325,27 @@ static void server_send_log(struct serve
 }
 #endif
 
+#ifdef HAVE_REGEX
+static int match_domain_for_forward(const char *domain, const struct server *serv)
+{
+  int ret_val = 0;
+  if(serv->flags & SERV_IS_REGEX)
+    ret_val = match_regex(serv->regex, serv->pextra, domain, strlen(domain), NULL);
+  else
+    ret_val = hostname_isequal(domain, serv->domain);
+  return ret_val;
+}
+#endif
+
 static int server_test_type(const struct server *server,
 			    const char *domain, int type, int extratype)
 {
   return (type == (server->flags & (SERV_TYPE | extratype)) &&
+#ifdef HAVE_REGEX
+      (type != SERV_HAS_DOMAIN || match_domain_for_forward(domain, server)) &&
+#else
       (type != SERV_HAS_DOMAIN || hostname_isequal(domain, server->domain)) &&
+#endif
       !(server->flags & (SERV_LITERAL_ADDRESS | SERV_LOOP)));
 }
 
@@ -418,6 +474,11 @@ static int forward_query(int udpfd, unio
 #endif
 
       /* retry on existing query, from original source. Send to all available servers  */
+#ifdef HAVE_REGEX
+      if(forward->sentto->flags & SERV_IS_REGEX)
+        domain = daemon->namebuff;
+      else
+#endif
       domain = forward->sentto->domain;
       forward->sentto->failed_queries++;
       if (!option_bool(OPT_ORDER) && old_src)
@@ -669,6 +730,14 @@ static size_t process_reply(struct dns_h
       unsigned int matchlen = 0;
       for (ipset_pos = daemon->ipsets; ipset_pos; ipset_pos = ipset_pos->next) 
 	{
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+	  if (ipset_pos->domain_type & IPSET_IS_REGEX){
+		  if (match_regex(ipset_pos->regex, ipset_pos->pextra, daemon->namebuff, namelen, NULL))
+		    sets = ipset_pos->sets;
+	  }else{
+#endif
+#endif
 	  unsigned int domainlen = strlen(ipset_pos->domain);
 	  char *matchstart = daemon->namebuff + namelen - domainlen;
 	  if (namelen >= domainlen && hostname_isequal(matchstart, ipset_pos->domain) &&
@@ -678,6 +747,11 @@ static size_t process_reply(struct dns_h
 	      matchlen = domainlen;
 	      sets = ipset_pos->sets;
 	    }
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+	  }
+#endif
+#endif
 	}
     }
 #endif
--- a/src/network.c
+++ b/src/network.c
@@ -1703,7 +1703,7 @@ void check_servers(void)
 	    serv->sfd->used = 1;
 	}
       
-      if (!(serv->flags & SERV_NO_REBIND) && !(serv->flags & SERV_LITERAL_ADDRESS))
+      if (!(serv->flags & (SERV_NO_REBIND | SERV_IS_REGEX)) && !(serv->flags & SERV_LITERAL_ADDRESS))
 	{
 	  if (++count > SERVERS_LOGGED)
 	    continue;
--- a/src/option.c
+++ b/src/option.c
@@ -714,6 +714,19 @@ static void add_txt(char *name, char *tx
 }
 #endif
 
+#ifdef HAVE_REGEX
+static const char *parse_regex_option(const char *arg, pcre **regex, pcre_extra **pextra)
+{
+  const char *error;
+  int erroff;
+  *regex = pcre_compile(arg, 0, &error, &erroff, NULL);
+  if(NULL == *regex)
+	return error;
+  *pextra = pcre_study(*regex, 0, &error);
+  return NULL;
+}
+#endif
+
 static void do_usage(void)
 {
   char buff[100];
@@ -2574,6 +2587,12 @@ static int one_opt(int option, char *arg
 	    while (rebind || (end = split_chr(arg, '/')))
 	      {
 		char *domain = NULL;
+		char *regex = NULL;
+		char *real_end = arg + strlen(arg);
+		if (*arg == ':' && *(real_end - 1) == ':'){
+			*(real_end - 1) = '\0';
+			regex = arg + 1;
+		}else{
 		/* elide leading dots - they are implied in the search algorithm */
 		while (*arg == '.') arg++;
 		/* # matches everything and becomes a zero length domain string */
@@ -2581,12 +2600,23 @@ static int one_opt(int option, char *arg
 		  domain = "";
 		else if (strlen (arg) != 0 && !(domain = canonicalise_opt(arg)))
 		  ret_err(gen_err);
+		}
 		serv = opt_malloc(sizeof(struct server));
 		memset(serv, 0, sizeof(struct server));
 		serv->next = newlist;
 		newlist = serv;
 		serv->domain = domain;
-		serv->flags = domain ? SERV_HAS_DOMAIN : SERV_FOR_NODOTS;
+		serv->flags = domain || regex ? SERV_HAS_DOMAIN : SERV_FOR_NODOTS;
+		if (regex){
+#ifdef HAVE_REGEX
+			const char *error = parse_regex_option(regex, &serv->regex, &serv->pextra);
+			if (error)
+				ret_err(error);
+			serv->flags |= SERV_IS_REGEX;
+#else
+			ret_err("Using a regex while server was configured without regex support!");
+#endif
+		}
 		arg = end;
 		if (rebind)
 		  break;
@@ -2708,6 +2738,23 @@ static int one_opt(int option, char *arg
 	     while ((end = split_chr(arg, '/'))) 
 	       {
 		 char *domain = NULL;
+		 char *real_end = arg + strlen(arg);
+		 if (*arg == ':' && *(real_end - 1) == ':'){
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+			 *(real_end - 1) = '\0';
+			 ipsets->next = opt_malloc(sizeof(struct ipsets));
+			 ipsets = ipsets->next;
+			 memset(ipsets, 0, sizeof(struct ipsets));
+			 const char *error = parse_regex_option(arg + 1, &ipsets->regex, &ipsets->pextra);
+			 if (error)
+				 ret_err(error);
+			 ipsets->domain_type = IPSET_IS_REGEX;
+#endif
+#else
+			 ret_err("Using a regex while server was configured without regex support!");
+#endif
+		 }else{
 		 /* elide leading dots - they are implied in the search algorithm */
 		 while (*arg == '.')
 		   arg++;
@@ -2720,6 +2767,12 @@ static int one_opt(int option, char *arg
 		 ipsets = ipsets->next;
 		 memset(ipsets, 0, sizeof(struct ipsets));
 		 ipsets->domain = domain;
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+		 ipsets->domain_type = IPSET_IS_DOMAIN;
+#endif
+#endif
+		 }
 		 arg = end;
 	       }
 	   } 
@@ -2728,6 +2781,11 @@ static int one_opt(int option, char *arg
 	     ipsets->next = opt_malloc(sizeof(struct ipsets));
 	     ipsets = ipsets->next;
 	     memset(ipsets, 0, sizeof(struct ipsets));
+#ifdef HAVE_REGEX
+#ifdef HAVE_REGEX_IPSET
+	     ipsets->domain_type = IPSET_IS_DOMAIN;
+#endif
+#endif
 	     ipsets->domain = "";
 	   }
 	 
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -1569,6 +1569,8 @@ size_t answer_request(struct dns_header
 
 		      if ((serv->flags & (SERV_HAS_DOMAIN | SERV_NO_ADDR)) != SERV_HAS_DOMAIN)
 		        continue;
+		      
+		      if (NULL == serv->domain) continue;
 
 		      domainlen = strlen(serv->domain);
 		      if (domainlen == 0 || domainlen > namelen)
--- a/src/util.c
+++ b/src/util.c
@@ -351,6 +351,8 @@ int hostname_isequal(const char *a, cons
 {
   unsigned int c1, c2;
   
+  if(NULL == a || NULL == b) return (NULL == a && NULL == b);
+  
   do {
     c1 = (unsigned char) *a++;
     c2 = (unsigned char) *b++;
